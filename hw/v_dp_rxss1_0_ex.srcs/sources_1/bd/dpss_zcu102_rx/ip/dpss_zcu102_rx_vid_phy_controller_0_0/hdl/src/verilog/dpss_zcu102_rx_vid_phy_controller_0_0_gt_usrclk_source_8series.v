///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 3.5
//  \   \         Application : 7 Series FPGAs Transceivers  Wizard
//  /   /         Filename : gtwizard_0_gt_usrclk_source.v
// /___/   /\      
// \   \  /  \ 
//  \___\/\___\ 
//
//
// Module gtwizard_0_GT_USRCLK_SOURCE (for use with GTs)
// Generated by Xilinx 7 Series FPGAs Transceivers Wizard
// 
// 
// (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


`timescale 1ns / 1ps

//***********************************Entity Declaration*******************************

module dpss_zcu102_rx_vid_phy_controller_0_0_gt_usrclk_source_8series #
(
  parameter TX_BUFFER_BYPASS = 0,
  parameter ADV_CLOCK_MODE   = 0,
  parameter GTH_TYPE         = 3

) 
(
    input  wire        MMCM_DRP_RST,
    input  wire        MMCM_DRP_SCLK,
    input  wire        MMCM_DRP_TXN_AVAILABLE,
    input  wire        MMCM_DRP_RSP_READ,
    input  wire [11:0] MMCM_DRPADDR, 
    input  wire        MMCM_DRPEN,
    input  wire        MMCM_DRPWE,
    input  wire [15:0] MMCM_DRPDI,
    output wire        MMCM_DRPBUSY,
    output wire        MMCM_DRPRDY,
    output wire [15:0] MMCM_DRPDO,

    input  wire		  mgtrefclk0_in,  
    input  wire		  mgtrefclk1_in,  
    input  wire		  Q0_CLK0_GTREFCLK_PAD_N_IN,
    input  wire		  Q0_CLK0_GTREFCLK_PAD_P_IN,
    output wire		  Q0_CLK0_GTREFCLK_OUT,
    input  wire		  Q0_CLK1_GTREFCLK_PAD_N_IN,
    input  wire		  Q0_CLK1_GTREFCLK_PAD_P_IN,
    output wire		  Q0_CLK1_GTREFCLK_OUT,

    input  wire       BUFGT_TXUSRCLK_CLEAR,
    input  wire [2:0] BUFGT_TXUSRCLK_DIV,
    input  wire       BUFGT_RXUSRCLK_CLEAR,
    input  wire [2:0] BUFGT_RXUSRCLK_DIV,
    output wire       TXUSRCLK_ACTIVE_OUT,
    output wire       RXUSRCLK_ACTIVE_OUT,

    output wire		  GT0_TXCLK_LOCK_OUT,
    input  wire		  GT0_TX_MMCM_RESET_IN,    
	
 

    output wire		  GT0_TXUSRCLK_OUT,
    output wire		  GT0_TXUSRCLK2_OUT,
    input  wire		  GT0_TXOUTCLK_IN,
    output wire		  GT0_RXUSRCLK_OUT,
    output wire		  GT0_RXUSRCLK2_OUT,
    input  wire		  GT0_RXOUTCLK_IN

);


	`define DLY #1
	localparam GTREFCLK0 = 0;
	localparam GTREFCLK1 = 1;
	localparam GTNORTHREFCLK0 = 2;
	localparam GTNORTHREFCLK1 = 3;
	localparam GTSOUTHREFCLK0 = 4;
	localparam GTSOUTHREFCLK1 = 5;

//*********************************Wire Declarations**********************************
    wire            tied_to_ground_i;
    wire            tied_to_vcc_i;
 
    wire            gt0_txoutclk_i; 
    wire            gt0_rxoutclk_i;
    wire            q0_clk1_gtrefclk; 
    wire            q0_clk0_gtrefclk;

    wire            gt0_txusrclk_i;
    wire            gt0_txoutclk_i_bufgt;
    wire            gt0_rxusrclk_i;
    wire            txoutclk_mmcm0_locked_i;
    wire            txoutclk_mmcm0_reset_i;
 
//*********************************** Beginning of Code *******************************

    //  Static signal Assigments    
    assign tied_to_ground_i             = 1'b0;
    assign tied_to_vcc_i                = 1'b1;
    assign gt0_txoutclk_i = GT0_TXOUTCLK_IN;
    assign gt0_rxoutclk_i = GT0_RXOUTCLK_IN;
     
    assign Q0_CLK0_GTREFCLK_OUT = (ADV_CLOCK_MODE)?mgtrefclk0_in:q0_clk0_gtrefclk;
    assign Q0_CLK1_GTREFCLK_OUT = (ADV_CLOCK_MODE)?mgtrefclk1_in:q0_clk1_gtrefclk;
 	
	
    generate
      if (ADV_CLOCK_MODE==0 && GTH_TYPE==3) begin : gen_standard_clocking

 
			// Differential reference clock buffer for MGTREFCLK0
			IBUFDS_GTE3 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE3_MGTREFCLK0_INST (
			  .I     (Q0_CLK0_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK0_GTREFCLK_PAD_N_IN),
			  .CEB   (1'b0),
			  .O     (q0_clk0_gtrefclk),
			  .ODIV2 ()
 
			);
 
        
 
			// Differential reference clock buffer for MGTREFCLK1
			IBUFDS_GTE3 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE3_MGTREFCLK1_INST (
			  .I     (Q0_CLK1_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK1_GTREFCLK_PAD_N_IN),
			  .CEB   (1'b0),
			  .O     (q0_clk1_gtrefclk),
			  .ODIV2 ()
 
			);
 
			
      end else if (ADV_CLOCK_MODE==0 && GTH_TYPE==4) begin

 
			// Differential reference clock buffer for MGTREFCLK0
			IBUFDS_GTE4 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE4_MGTREFCLK0_INST (
			  .I     (Q0_CLK0_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK0_GTREFCLK_PAD_N_IN),
			  .CEB   (1'b0),
			  .O     (q0_clk0_gtrefclk),
			  .ODIV2 ()
 
			);
 
        
 
			// Differential reference clock buffer for MGTREFCLK1
			IBUFDS_GTE4 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE4_MGTREFCLK1_INST (
			  .I     (Q0_CLK1_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK1_GTREFCLK_PAD_N_IN),
			  .CEB   (1'b0),
			  .O     (q0_clk1_gtrefclk),
			  .ODIV2 ()
 
			);
 

      end else begin
        assign q0_clk0_gtrefclk = 1'b0;
        assign q0_clk1_gtrefclk = 1'b0;
      end // if
    endgenerate

 	
    // Instantiate a MMCM module to divide the reference clock. Uses internal feedback
    // for improved jitter performance, and to avoid consuming an additional BUFG
    generate
        if (1) begin : tx_bufg_gt_used

      // Drive TXUSRCLK with BUFG_GT-buffered source clock, dividing the input by the integral source clock to TXUSRCLK
      // frequency ratio
      BUFG_GT bufg_gt_tx_usrclk_inst (
    	.CE      (1'b1),
    	.CEMASK  (1'b0),
    	.CLR     (BUFGT_TXUSRCLK_CLEAR),
    	.CLRMASK (1'b0),
    	.DIV     (BUFGT_TXUSRCLK_DIV),
    	.I       (gt0_txoutclk_i),
    	.O       (gt0_txusrclk_i)
      );
	  
    end
    endgenerate
 	

  

    generate
        if (0) begin : tx_mmcm_not_used

          wire[15:0] DO;
          wire       DRDY;
          wire       LOCKED;
          wire       DWE;
          wire       DEN;
          wire[6:0]  DADDR;
          wire[15:0] DI;

          assign LOCKED = txoutclk_mmcm0_locked_i;
     // Drive TXUSRCLK with BUFG_GT-buffered source clock, dividing the input by the integral source clock to TXUSRCLK
      // frequency ratio
      BUFG_GT bufg_gt_tx_usrclk_inst (
    	.CE      (1'b1),
    	.CEMASK  (1'b0),
    	.CLR     (BUFGT_TXUSRCLK_CLEAR),
    	.CLRMASK (1'b0),
    	.DIV     (BUFGT_TXUSRCLK_DIV),
    	.I       (gt0_txoutclk_i),
    	.O       (gt0_txoutclk_i_bufgt)
      );
 

           // TXPLL DRP CONTROLLER
           wire [31:0] DRP_Config_mmcm_txusrclk;
           wire [31:0] DRP_Status_mmcm_txusrclk;
           assign DRP_Config_mmcm_txusrclk[11:0] = MMCM_DRPADDR;
           assign DRP_Config_mmcm_txusrclk[12]   = MMCM_DRPEN;
           assign DRP_Config_mmcm_txusrclk[13]   = MMCM_DRPWE;
           assign DRP_Config_mmcm_txusrclk[31:16]= MMCM_DRPDI;
           assign MMCM_DRPBUSY = DRP_Status_mmcm_txusrclk[17];
           assign MMCM_DRPRDY  = DRP_Status_mmcm_txusrclk[16];
           assign MMCM_DRPDO   = DRP_Status_mmcm_txusrclk[15:0];
		
       
           vid_phy_controller_v2_2_5_drp_control_hdmi #  
          (
               .DRP_ADDR_WIDTH (7)
           )
           TXPLL_DRP_INST
           (
               .Config_Clk          (MMCM_DRP_SCLK),
               .Config_Rst          (MMCM_DRP_RST),
               .DRP_Config          (DRP_Config_mmcm_txusrclk),
               .DRP_Status          (DRP_Status_mmcm_txusrclk),
               .drp_txn_available   (MMCM_DRP_TXN_AVAILABLE),
               .drp_rsp_read        (MMCM_DRP_RSP_READ),
               .DRPCLK              (MMCM_DRP_SCLK),
               .DRPBUSY             (1'b0),
               .DRPEN               (DEN),
               .DRPWE               (DWE),
               .DRPADDR             (DADDR),
               .DRPDI               (DI),
               .DRPDO               (DO),
               .DRPRDY              (DRDY)  
		
          );

           assign  txoutclk_mmcm0_reset_i               =  GT0_TX_MMCM_RESET_IN;
           dpss_zcu102_rx_vid_phy_controller_0_0_CLOCK_MODULE_8series #

           (
               .MULT                           (9.0),
               .CLK_PERIOD                     (7.407),
               .DIVIDE                         (2),
               .OUT0_DIVIDE                    (15.0),
               .OUT1_DIVIDE                    (1),
               .OUT2_DIVIDE                    (1),
               .OUT3_DIVIDE                    (1)
           )
	
           txoutclk_mmcm0_i
           (
               .CLK0_OUT                       (gt0_txusrclk_i),
               .CLK1_OUT                       (),
               .CLK2_OUT                       (),
               .CLK3_OUT                       (),
               .CLK_IN                         (gt0_txoutclk_i_bufgt),
               .DCLK                           (MMCM_DRP_SCLK),
               .DWE                            (DWE),
               .DEN                            (DEN),
               .DADDR                          (DADDR),
               .DI                             (DI),
               .DRDY                           (DRDY),
               .DO                             (DO),
               .MMCM_PWRDN_IN                  (1'b0),
               .MMCM_LOCKED_OUT                (txoutclk_mmcm0_locked_i),
               .MMCM_RESET_IN                  (txoutclk_mmcm0_reset_i)
           );

		
	end
    endgenerate

	
     // Drive RXUSRCLK with BUFG_GT-buffered source clock, dividing the input by the integral source clock to RXUSRCLK
     // frequency ratio
    wire CESYNC_rx_usrclk;
    wire CLRSYNC_rx_usrclk;
     BUFG_GT bufg_gt_rx_usrclk_inst (
       .CE      (1'b1),
       .CEMASK  (1'b0),
       .CLR     (BUFGT_RXUSRCLK_CLEAR),
       .CLRMASK (1'b0),
       .DIV     (BUFGT_RXUSRCLK_DIV),
       .I       (gt0_rxoutclk_i),
       .O       (gt0_rxusrclk_i)
     );

// Clock active assignment
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_tx_active_meta = 1'b0;
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_tx_active_sync = 1'b0;
  always @(posedge GT0_TXUSRCLK2_OUT, posedge BUFGT_TXUSRCLK_CLEAR) begin
    if (BUFGT_TXUSRCLK_CLEAR) begin
      gtwiz_userclk_tx_active_meta <= 1'b0;
      gtwiz_userclk_tx_active_sync <= 1'b0;
    end
    else begin
      gtwiz_userclk_tx_active_meta <= 1'b1;
      gtwiz_userclk_tx_active_sync <= gtwiz_userclk_tx_active_meta;
    end
  end
  assign TXUSRCLK_ACTIVE_OUT = gtwiz_userclk_tx_active_sync;

  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_rx_active_meta = 1'b0;
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_rx_active_sync = 1'b0;
  always @(posedge GT0_RXUSRCLK2_OUT, posedge BUFGT_RXUSRCLK_CLEAR) begin
    if (BUFGT_RXUSRCLK_CLEAR) begin
      gtwiz_userclk_rx_active_meta <= 1'b0;
      gtwiz_userclk_rx_active_sync <= 1'b0;
    end
    else begin
      gtwiz_userclk_rx_active_meta <= 1'b1;
      gtwiz_userclk_rx_active_sync <= gtwiz_userclk_rx_active_meta;
    end
  end
  assign RXUSRCLK_ACTIVE_OUT = gtwiz_userclk_rx_active_sync;

// Output clock assignments 
assign GT0_TXUSRCLK_OUT   = gt0_txusrclk_i;
assign GT0_TXUSRCLK2_OUT  = gt0_txusrclk_i;
assign GT0_RXUSRCLK_OUT   = gt0_rxusrclk_i;
assign GT0_RXUSRCLK2_OUT  = gt0_rxusrclk_i;
assign GT0_TXCLK_LOCK_OUT = txoutclk_mmcm0_locked_i;


endmodule

